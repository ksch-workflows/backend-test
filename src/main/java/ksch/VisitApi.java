/*
 * K.S.C.H. Workflows
 * This website contains the HTTP endpoints that are offered by the [backend](https://github.com/ksch-workflows/backend) component for frontend components of the [K.S.C.H. Workflows](https://ksch-workflows.github.io/) project. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ksch;

import ksch.ApiClient;
import ksch.ApiException;
import ksch.ApiResponse;
import ksch.Pair;

import java.util.UUID;
import ksch.model.VisitRequest;
import ksch.model.VisitResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;


public class VisitApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public VisitApi() {
    this(new ApiClient());
  }

  public VisitApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a visit for a patient
   * 
   * @param patientId The ID of the affected patient (required)
   * @param visitRequest Object containing the visit details (optional)
   * @return VisitResponse
   * @throws ApiException if fails to make API call
   */
  public VisitResponse createVisit(UUID patientId, VisitRequest visitRequest) throws ApiException {
    ApiResponse<VisitResponse> localVarResponse = createVisitWithHttpInfo(patientId, visitRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a visit for a patient
   * 
   * @param patientId The ID of the affected patient (required)
   * @param visitRequest Object containing the visit details (optional)
   * @return ApiResponse&lt;VisitResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VisitResponse> createVisitWithHttpInfo(UUID patientId, VisitRequest visitRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createVisitRequestBuilder(patientId, visitRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createVisit", localVarResponse);
        }
        return new ApiResponse<VisitResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VisitResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createVisitRequestBuilder(UUID patientId, VisitRequest visitRequest) throws ApiException {
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      throw new ApiException(400, "Missing the required parameter 'patientId' when calling createVisit");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/patients/{patientId}/visits"
        .replace("{patientId}", ApiClient.urlEncode(patientId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(visitRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the details of an individual visit
   * 
   * @param patientId The ID of the affected patient (required)
   * @param visitId The ID of the visit to retrieve (required)
   * @return VisitResponse
   * @throws ApiException if fails to make API call
   */
  public VisitResponse getVisitById(UUID patientId, UUID visitId) throws ApiException {
    ApiResponse<VisitResponse> localVarResponse = getVisitByIdWithHttpInfo(patientId, visitId);
    return localVarResponse.getData();
  }

  /**
   * Get the details of an individual visit
   * 
   * @param patientId The ID of the affected patient (required)
   * @param visitId The ID of the visit to retrieve (required)
   * @return ApiResponse&lt;VisitResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VisitResponse> getVisitByIdWithHttpInfo(UUID patientId, UUID visitId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVisitByIdRequestBuilder(patientId, visitId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVisitById", localVarResponse);
        }
        return new ApiResponse<VisitResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VisitResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVisitByIdRequestBuilder(UUID patientId, UUID visitId) throws ApiException {
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      throw new ApiException(400, "Missing the required parameter 'patientId' when calling getVisitById");
    }
    // verify the required parameter 'visitId' is set
    if (visitId == null) {
      throw new ApiException(400, "Missing the required parameter 'visitId' when calling getVisitById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/patients/{patientId}/visits/{visitId}"
        .replace("{patientId}", ApiClient.urlEncode(patientId.toString()))
        .replace("{visitId}", ApiClient.urlEncode(visitId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}

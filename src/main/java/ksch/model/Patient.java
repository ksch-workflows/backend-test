/*
 * K.S.C.H. Workflows
 * This website contains the HTTP endpoints that are offered by the [backend](https://github.com/ksch-workflows/backend) component for frontend components of the [K.S.C.H. Workflows](https://ksch-workflows.github.io/) project. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ksch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import ksch.model.Gender;
import ksch.model.PatientCategory;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Patient
 */
@JsonPropertyOrder({
  Patient.JSON_PROPERTY_PATIENT_NUMBER,
  Patient.JSON_PROPERTY_AGE,
  Patient.JSON_PROPERTY_NAME,
  Patient.JSON_PROPERTY_GENDER,
  Patient.JSON_PROPERTY_PATIENT_CATEGORY,
  Patient.JSON_PROPERTY_PHONE_NUMBER,
  Patient.JSON_PROPERTY_RESIDENTIAL_ADDRESS
})

public class Patient {
  public static final String JSON_PROPERTY_PATIENT_NUMBER = "patientNumber";
  private JsonNullable<String> patientNumber = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_AGE = "age";
  private JsonNullable<Integer> age = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_GENDER = "gender";
  private JsonNullable<Gender> gender = JsonNullable.<Gender>undefined();

  public static final String JSON_PROPERTY_PATIENT_CATEGORY = "patientCategory";
  private JsonNullable<PatientCategory> patientCategory = JsonNullable.<PatientCategory>undefined();

  public static final String JSON_PROPERTY_PHONE_NUMBER = "phoneNumber";
  private JsonNullable<String> phoneNumber = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_RESIDENTIAL_ADDRESS = "residentialAddress";
  private JsonNullable<String> residentialAddress = JsonNullable.<String>undefined();

  public Patient() { 
  }

  public Patient patientNumber(String patientNumber) {
    this.patientNumber = JsonNullable.<String>of(patientNumber);
    return this;
  }

   /**
   * The identifier used by the hospital staff to correlate patients with their data.
   * @return patientNumber
  **/

  @JsonIgnore

  public String getPatientNumber() {
        return patientNumber.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PATIENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPatientNumber_JsonNullable() {
    return patientNumber;
  }
  
  @JsonProperty(JSON_PROPERTY_PATIENT_NUMBER)
  public void setPatientNumber_JsonNullable(JsonNullable<String> patientNumber) {
    this.patientNumber = patientNumber;
  }

  public void setPatientNumber(String patientNumber) {
    this.patientNumber = JsonNullable.<String>of(patientNumber);
  }


  public Patient age(Integer age) {
    this.age = JsonNullable.<Integer>of(age);
    return this;
  }

   /**
   * The number of years that have passed since the patient&#39;s date of birth.
   * minimum: 0
   * @return age
  **/

  @JsonIgnore

  public Integer getAge() {
        return age.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAge_JsonNullable() {
    return age;
  }
  
  @JsonProperty(JSON_PROPERTY_AGE)
  public void setAge_JsonNullable(JsonNullable<Integer> age) {
    this.age = age;
  }

  public void setAge(Integer age) {
    this.age = JsonNullable.<Integer>of(age);
  }


  public Patient name(String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

   /**
   * All the name parts, i.e. first name, middle name, and last name.
   * @return name
  **/

  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public Patient gender(Gender gender) {
    this.gender = JsonNullable.<Gender>of(gender);
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/

  @JsonIgnore

  public Gender getGender() {
        return gender.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GENDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Gender> getGender_JsonNullable() {
    return gender;
  }
  
  @JsonProperty(JSON_PROPERTY_GENDER)
  public void setGender_JsonNullable(JsonNullable<Gender> gender) {
    this.gender = gender;
  }

  public void setGender(Gender gender) {
    this.gender = JsonNullable.<Gender>of(gender);
  }


  public Patient patientCategory(PatientCategory patientCategory) {
    this.patientCategory = JsonNullable.<PatientCategory>of(patientCategory);
    return this;
  }

   /**
   * Get patientCategory
   * @return patientCategory
  **/

  @JsonIgnore

  public PatientCategory getPatientCategory() {
        return patientCategory.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PATIENT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PatientCategory> getPatientCategory_JsonNullable() {
    return patientCategory;
  }
  
  @JsonProperty(JSON_PROPERTY_PATIENT_CATEGORY)
  public void setPatientCategory_JsonNullable(JsonNullable<PatientCategory> patientCategory) {
    this.patientCategory = patientCategory;
  }

  public void setPatientCategory(PatientCategory patientCategory) {
    this.patientCategory = JsonNullable.<PatientCategory>of(patientCategory);
  }


  public Patient phoneNumber(String phoneNumber) {
    this.phoneNumber = JsonNullable.<String>of(phoneNumber);
    return this;
  }

   /**
   * Patient phone number
   * @return phoneNumber
  **/

  @JsonIgnore

  public String getPhoneNumber() {
        return phoneNumber.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPhoneNumber_JsonNullable() {
    return phoneNumber;
  }
  
  @JsonProperty(JSON_PROPERTY_PHONE_NUMBER)
  public void setPhoneNumber_JsonNullable(JsonNullable<String> phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = JsonNullable.<String>of(phoneNumber);
  }


  public Patient residentialAddress(String residentialAddress) {
    this.residentialAddress = JsonNullable.<String>of(residentialAddress);
    return this;
  }

   /**
   * Patient residential address
   * @return residentialAddress
  **/

  @JsonIgnore

  public String getResidentialAddress() {
        return residentialAddress.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RESIDENTIAL_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getResidentialAddress_JsonNullable() {
    return residentialAddress;
  }
  
  @JsonProperty(JSON_PROPERTY_RESIDENTIAL_ADDRESS)
  public void setResidentialAddress_JsonNullable(JsonNullable<String> residentialAddress) {
    this.residentialAddress = residentialAddress;
  }

  public void setResidentialAddress(String residentialAddress) {
    this.residentialAddress = JsonNullable.<String>of(residentialAddress);
  }


  /**
   * Return true if this Patient object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Patient patient = (Patient) o;
    return equalsNullable(this.patientNumber, patient.patientNumber) &&
        equalsNullable(this.age, patient.age) &&
        equalsNullable(this.name, patient.name) &&
        equalsNullable(this.gender, patient.gender) &&
        equalsNullable(this.patientCategory, patient.patientCategory) &&
        equalsNullable(this.phoneNumber, patient.phoneNumber) &&
        equalsNullable(this.residentialAddress, patient.residentialAddress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(patientNumber), hashCodeNullable(age), hashCodeNullable(name), hashCodeNullable(gender), hashCodeNullable(patientCategory), hashCodeNullable(phoneNumber), hashCodeNullable(residentialAddress));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Patient {\n");
    sb.append("    patientNumber: ").append(toIndentedString(patientNumber)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    patientCategory: ").append(toIndentedString(patientCategory)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    residentialAddress: ").append(toIndentedString(residentialAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `patientNumber` to the URL query string
    if (getPatientNumber() != null) {
      joiner.add(String.format("%spatientNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPatientNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `age` to the URL query string
    if (getAge() != null) {
      joiner.add(String.format("%sage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAge()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `gender` to the URL query string
    if (getGender() != null) {
      joiner.add(String.format("%sgender%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGender()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `patientCategory` to the URL query string
    if (getPatientCategory() != null) {
      joiner.add(String.format("%spatientCategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPatientCategory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `phoneNumber` to the URL query string
    if (getPhoneNumber() != null) {
      joiner.add(String.format("%sphoneNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhoneNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `residentialAddress` to the URL query string
    if (getResidentialAddress() != null) {
      joiner.add(String.format("%sresidentialAddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResidentialAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

